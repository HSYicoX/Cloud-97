
[
  {
    "_id": "1",
    "title": "React 18新特性深度解析",
    "content": "# React 18新特性深度解析\n\nReact 18带来了许多令人兴奋的新特性，本文将深入探讨这些变化。\n\n## 并发渲染（极Concurrent Rendering）\n\nReact 18最大的变化是引入了并发渲染机制。这意味着React可以在渲染过程中中断和恢复工作，从而提供更流畅的用户体验。\n\n```javascript\nimport { create极Root } from 'react-dom/client';\n\n// 新的渲染API\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);\n```\n\n## 自动批处理（Automatic Batching）\n\nReact 18改进了批处理机制，现在可以在更多场景下自动批处理状态更新：\n\n```javascript\nfunction MyComponent() {\n  const [count, setCount] = useState(0);\n  const [name, setName] = useState('');\n\n  const handleClick = () => {\n    setCount(c => c + 1);\n    setName('Updated'); // 这两个更新会被自动批处理\n极  };\n\n  return <button onClick={handleClick}>Click me</button>;\n}\n```\n\n## 新的Hooks\n\nReact 18引入了几个新的Hooks：\n\n- `useId` - 生成唯一的ID\n- `useTransition` - 管理过渡状态\n- `useDeferredValue` - 延迟更新值\n\n```javascript\nimport { useTransition } from 'react';\n\nfunction SearchBox() {\n  const [isPending, startTransition] = useTransition();\n  const [query, setQuery极] = useState('');\n\n  const handleSearch = (value) => {\n    startTransition(() => {\n      setQuery(value);\n    });\n  };\n\n  return (\n    <div>\n      <input onChange={(e) => handleSearch(e.target.value)} />\n      {isPending && <span>Loading...</span>}\n    </div>\n  );\n}\n```\n\n## 服务端渲染改进\n\nReact 18对SSR进行了重大改进，支持流式渲染和选择性水合。\n\n## 总结\n\nReact 18的并发特性为构建更响应式的应用程序提供了强大的基础。这些改进使得React能够更好地处理复杂的用户交互和大型应用程序。",
    "author": {
      "name": "Haokir",
      "avatar": "https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?w=150&h=150&fit=crop&crop=face",
      "bio": "前端开发工程师，React爱好者"
    },
    "createdAt": "2024-01-15",
    "updatedAt": "2024-01-15",
    "publishedAt": "2024-01-15",
    "readTime": "8 min read",
    "likes": 42,
    "tags": ["React", "前端开发", "JavaScript"],
    "category": "前端开发",
    "status": "published",
    "isPublished": true,
    "isDraft": false,
    "isFavorite": false,
    "favoriteCount": 42,
    "viewCount": 128,
    "slug": "react-18-new-features",
    "coverImage": "https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=800&h=400&fit=crop",
    "excerpt": "React 18带来了并发渲染、自动批处理等令人兴奋的新特性，本文将深入探讨这些变化。",
    "metaDescription": "深度解析React 18的新特性，包括并发渲染、自动批处理、新的Hooks和服务端渲染改进。",
    "metaKeywords": ["React", "React 18", "前端开发", "JavaScript", "并发渲染"],
    "createdAt": 1736870400000,
    "updatedAt": 1736870400000
  },
  {
    "_id": "2",
    "title": "TypeScript高级类型技巧",
    "content": "掌握TypeScript的条件类型、映射类型和模板字面量类型的高级用法",
    "author": {
      "name": "TypeScript专家",
      "avatar": "https极://images.unsplash.com/photo-1573496359142-b8d87734a5a2?w=150&h=150&fit=crop&crop=face",
      "bio": "TypeScript技术专家"
    },
    "createdAt": "2024-01-10",
    "updatedAt": "2024-01-10",
    "publishedAt": "2024-01-10",
    "readTime": "12 min read",
    "likes": 28,
    "tags": ["TypeScript", "前端开发"],
    "category": "前端开发",
    "status": "published",
    "isPublished": true,
    "isDraft": false,
    "isFavorite": false,
    "favoriteCount": 15,
    "viewCount": 89,
    "slug": "typescript-advanced-types",
    "coverImage": "https://images.unsplash.com/photo-1611224923853-80b023f02d71?w=800&h=400&fit=crop",
    "excerpt": "学习TypeScript高级类型技巧，提升代码质量和开发效率。",
    "metaDescription": "掌握TypeScript的条件类型、映射类型和模板字面量类型的高级用法，提升开发技能。",
    "metaKeywords": ["TypeScript", "类型系统", "前端开发", "JavaScript"],
    "createdAt": 1736467200000,
    "updatedAt": 1736467200000
  },
  {
    "_id": "3",
    "title": "现代CSS布局实战",
    "content": "使用Grid和Flexbox构建响应式布局的最佳实践和技巧",
    "author": {
      "name": "CSS大师",
      "avatar": "https://images.unsplash.com/photo-1560250097-0b93528c311a?w=150&h=150&fit=crop&crop=face",
      "bio": "CSS布局专家"
    },
    "createdAt": "2024-01-05",
    "updatedAt": "2024-01-05",
    "publishedAt": "2024-01-05",
    "readTime": "6 min read",
    "likes极": 35,
    "tags": ["CSS", "布局", "响应式设计"],
    "category": "前端开发",
    "status": "published",
    "isPublished": true,
    "isDraft": false,
    "isFavorite": false,
    "favoriteCount": 20,
    "viewCount": 76,
    "slug": "modern-css-layout",
    "coverImage": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800&h=400&fit=crop",
    "excerpt": "掌握现代CSS布局技术，使用Grid和Flexbox构建优秀的响应式布局。",
    "metaDescription": "学习使用Grid和Flexbox构建响应式布局的最佳实践和技巧，提升前端开发能力。",
    "metaKeywords": ["CSS", "Grid", "Flexbox", "响应式设计", "前端开发"],
    "createdAt": 1736035200000,
    "updatedAt": 1736035200000
  },
  {
    "_id": "4",
    "title": "Vue 3组合式API深入解析",
    "content": "深入学习Vue 3的组合式API和响应式系统的核心原理",
    "author": {
      "name": "Vue开发者",
      "avatar": "https://images.unsplash.com/photo-1519085360753-af0119f7cbe7?w=150&h=150&fit=crop&crop=face",
      "bio": "Vue.js技术专家"
    },
    "createdAt": "2024-01-02",
    "updatedAt": "2024-01-02",
    "publishedAt": "2024-01-02",
    "readTime": "10 min read",
    "likes": 31,
    "tags": ["Vue", "前端框架", "JavaScript"],
    "category": "前端开发",
    "status": "published",
    "isPublished": true,
    "isDraft": false,
    "isFavorite": false,
    "favoriteCount": 18,
    "viewCount": 67,
    "slug": "vue-3-composition-api",
    "coverImage": "https://images.unsplash.com/photo-1566837945700-30057527ade0?w=800&h=400&fit=crop",
    "excerpt": "深入理解Vue 3的组合式API和响应式系统，提升Vue开发技能。",
    "metaDescription": "深入学习Vue 3的组合式API和响应式系统的核心原理，掌握现代Vue开发技术。",
    "metaKeywords": ["Vue", "Vue 3", "组合式API", "响应式系统", "前端框架"],
    "createdAt": 1735776000000,
    "updatedAt": 173577极6000000
  },
  {
    "_id": "5",
    "title": "Node.js性能优化指南",
    "content": "探索Node.js性能优化的各种技术和最佳实践",
    "author": {
      "name": "Haokir",
      "avatar": "https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?w=150&h=150&fit=crop&crop=face",
      "bio": "前端开发工程师，React爱好者"
    },
    "createdAt": "2024-01-20",
    "updatedAt": "2024-01-20",
    "readTime": "15 min read",
    "likes": 0,
    "tags": ["Node.js", "性能优化", "后端开发"],
    "category": "后端开发",
    "status": "draft",
    "isPublished": false,
    "isDraft": true,
    "isFavorite": false,
    "favoriteCount": 0,
    "viewCount": 0,
    "slug": "nodejs-performance-optimization",
    "coverImage": "https://images.unsplash.com/photo-1627398242454-45a1465c2479?w=800&h=400&fit=crop",
    "excerpt": "学习Node.js性能优化的各种技术和最佳实践，提升应用性能。",
    "metaDescription": "探索Node.js性能优化的各种技术和最佳实践，包括内存管理、事件循环优化等。",
    "metaKeywords": ["Node.js", "性能优化", "后端开发", "JavaScript"],
    "createdAt": 1737331200000,
    "updatedAt": 1737331200000
  }
]
  